// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc157.Tekeva2018.commands;
import org.usfirst.frc157.Tekeva2018.commands.DriveWithSticks;
import org.usfirst.frc157.Tekeva2018.subsystems.Drive;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc157.Tekeva2018.commands.DriveSpeedForTime;
import org.usfirst.frc157.Tekeva2018.Robot;
import org.usfirst.frc157.Tekeva2018.RobotMap;
import edu.wpi.first.wpilibj.command.CommandGroup;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */
public class AutonomousCommand extends CommandGroup
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final WPI_TalonSRX driveLeft1 = RobotMap.driveDriveLeft1;
    private final WPI_TalonSRX driveRight1 = RobotMap.driveDriveLeft1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    public boolean hasFinished = false;
    private boolean runfunc = false;
    private int waitfor = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public String getGameData;
    public AutonomousCommand() 
    {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        //System.out.println(getGameData);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

}
    

    // Called just before this Command runs the first time
    @Override
    protected void initialize() 
    {
        getGameData = DriverStation.getInstance().getGameSpecificMessage();
        System.out.println(getGameData);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() 
    {
        addSequential(new DriveSpeedForTime(0.15, 0.15, 5));
       // addParallel(new DriveSpeedForTime(0, 0, 0.1));
    }
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() 
    {
        return hasFinished;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() 
    {
    }

    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() 
    {
    }
}
