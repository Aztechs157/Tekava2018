// RobotBuilder Version: 2.0 
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.Tekeva2018;

import org.usfirst.frc157.Tekeva2018.commands.*;  
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc157.Tekeva2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton r1;
    public JoystickButton l1;
    public JoystickButton k1;
    public JoystickButton k2;
    public JoystickButton select;
    public JoystickButton start;
    public JoystickButton ATKL6;
    public Joystick gamePadController;
    public Joystick OpBox;
    public Joystick ArcJoy;
    public Joystick AttackL;
    public Joystick AttackR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int R2 = 3;
    public int L2 = 2;
    public int LYStick = 1;
    public int RYStick = 5;
    public int RxStick = 4;
    public int JoyY = 1;
    public int Ratk = 1;
    public int Latk = 1;
    public int LatkPot = 2;
    public int RatkPot = 2;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamePadController = new Joystick(0);
        
        //OpBox = new Joystick(1);
        //AttackL = new Joystick(4);
        //AttackR = new Joystick(5);
        //ArcJoy = new Joystick(2);
        l1 = new JoystickButton(gamePadController, 5);
        l1.whileHeld(new ForkliftClose());
        r1 = new JoystickButton(gamePadController, 6);
        r1.whileHeld(new ForkliftOpen());

        //k1 = new JoystickButton(OpBox, 1);
        //k1.whileHeld(new ForkliftClose());
        //k2 = new JoystickButton(OpBox, 2);
        //k2.whileHeld(new ForkliftOpen());

        // SmartDashboard Buttons
        
        SmartDashboard.putData("Autonomous Command", new Autogroup());
        SmartDashboard.putData("DriveWithSticks", new DriveWithSticks());
        SmartDashboard.putData("ForkliftUp", new ForkliftUp());
        SmartDashboard.putData("ForkliftDown", new ForkliftDown());
        SmartDashboard.putData("ForkliftOpen", new ForkliftOpen());
        SmartDashboard.putData("ForkliftClose", new ForkliftClose());
        //SmartDashboard.putData("USB Camera", new Camera());


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        start = new JoystickButton(gamePadController, 8);
        start.whenPressed(new DebugInfo());
        select = new JoystickButton(gamePadController, 7);
        select.whenPressed(new DriveSwap());
        //ATKL6 = new JoystickButton(AttackL, 6);
        //ATKL6.whenPressed(new AttackSwap());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getGamePadController() {
        return gamePadController;
    }
    public Joystick OpBox()
    {
     return OpBox;
    }

    public Joystick getAttackL()
    {
        return AttackL;
    }
    public Joystick getAttackR ()
    {
        return AttackR;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

