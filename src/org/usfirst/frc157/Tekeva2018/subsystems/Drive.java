// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.Tekeva2018.subsystems;

import java.text.DecimalFormat;

import org.usfirst.frc157.Tekeva2018.OI;
import org.usfirst.frc157.Tekeva2018.Robot;
import org.usfirst.frc157.Tekeva2018.RobotMap;
import org.usfirst.frc157.Tekeva2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static int count=0; 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder leftQuad = RobotMap.driveLeftQuad;
    private final Encoder rightQuad = RobotMap.driveRightQuad;
    private final WPI_TalonSRX driveLeft1 = RobotMap.driveDriveLeft1;
    private final WPI_TalonSRX driveLeft2 = RobotMap.driveDriveLeft2;
    private final WPI_TalonSRX driveRight1 = RobotMap.driveDriveRight1;
    private final WPI_TalonSRX driveRight2 = RobotMap.driveDriveRight2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Accelerometer accel = RobotMap.accel;
    private final AnalogPotentiometer analogPotentiometer = RobotMap.motorControllerTeAnalogPotentiometer;
    @Override
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        driveRight1.set(ControlMode.PercentOutput, 0.0);
        driveRight2.set(ControlMode.Follower, 2);
        driveLeft1.set(ControlMode.PercentOutput, 0.0);
        driveLeft2.set(ControlMode.Follower, 11);
        setDefaultCommand(new DriveWithSticks());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void DriveRobot()
    {
        DecimalFormat numberFormat = new DecimalFormat("0.00");
        double potentiometer = analogPotentiometer.get();
        count++;
        if (count==100)
        {
            //System.out.println(numberFormat.format(potentiometer));
            count=0;
        }
        double Rdrive = Robot.oi.getGamePadController().getRawAxis(Robot.oi.RStick);
        double Ldrive = -Robot.oi.getGamePadController().getRawAxis(Robot.oi.LStick);
        driveRight1.set(Rdrive * potentiometer); // Change to RDrive * potentiometer
        driveLeft1.set(Ldrive * potentiometer); // Change to LDrive * potentiometer
    }
    public void AutoDrive(double Rdrive, double Ldrive)
    {
        Rdrive = Robot.oi.getGamePadController().getRawAxis(Robot.oi.RStick);
        Ldrive = -Robot.oi.getGamePadController().getRawAxis(Robot.oi.LStick);
        driveRight1.set(Rdrive);
        driveLeft1.set(Ldrive);
    }
    public double[] getAccelerometer()
    {
        return new double[]{accel.getX(), accel.getY(), accel.getZ()};
    }
    public String debugPrint()
    {
        return "accelerometer X: " + accel.getX() + "\naccelerometer Y: " + accel.getY() + "\naccelerometer Z: " + accel.getZ();
    }
    @Override
    public void periodic()
    {
        // Put code here to be run every loop
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

