// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.Tekeva2018.subsystems;

import org.usfirst.frc157.Tekeva2018.RobotMap;
import org.usfirst.frc157.Tekeva2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS



public class ForkliftForks extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX forkMotor = RobotMap.forkliftForksForkMotor;
    private final DigitalInput openSwitch = RobotMap.forkliftForksOpenSwitch;
    private final DigitalInput closeSwitch = RobotMap.forkliftForksCloseSwitch;
    private final DigitalInput opticalSensor = RobotMap.OpticalSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        forkMotor.set(ControlMode.PercentOutput, 0.0);
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void Open()
    {
        //System.out.println("opening");
        if (openSwitch.get())
        {
            forkMotor.set(-1);
        }
        else
        {
            forkMotor.stopMotor();
        }
    }
    public boolean getOpticalSensor()
    {
        return opticalSensor.get();
    }
    public void close()
    {
        //System.out.println(closeSwitch.get());
        if (closeSwitch.get())
        {
            forkMotor.set(1);
        }
        else
        {
            forkMotor.stopMotor();
        }
    }
    public String debugPrint()
    {
        String retVal = "open switch: " + openSwitch.get() + "\nclose switch: " + closeSwitch.get() + "Optical Sensor: " + getOpticalSensor();
        return retVal;
    }
    public void stop()
    {
        forkMotor.stopMotor();
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

