// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.Tekeva2018.subsystems;

import org.usfirst.frc157.Tekeva2018.RobotMap;
import org.usfirst.frc157.Tekeva2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ForkliftElevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX elevatorMotor = RobotMap.forkliftElevatorElevatorMotor;
    private final DigitalInput highSwitch = RobotMap.forkliftElevatorHighSwitch;
    private final DigitalInput lowSwitch = RobotMap.forkliftElevatorLowSwitch;
    private final Encoder forkEncoder = RobotMap.forkEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public enum switches 
        {
                HIGH,
                LOW
        };
    public switches HIGH = switches.HIGH;
    public switches LOW = switches.LOW;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        elevatorMotor.set(ControlMode.PercentOutput, 0.0);
        setDefaultCommand(new ForkLiftController());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    public void move(double amount, switches direction)
    {
        DigitalInput switchToCheck = null;
        if (direction == switches.HIGH)
        {
            switchToCheck = highSwitch;
        }
        else
        {
            switchToCheck = lowSwitch;
        }
        if (switchToCheck.get())
        {
            elevatorMotor.set(amount);
        }
        else
        {
            elevatorMotor.set(0.0);
        }
    }
    public String debugPrint()
    {
        String retVal = "high switch: " + highSwitch.get() + "\nlow switch: " + lowSwitch.get();
        return retVal;
    }
    public void AutoRaise(double speed)
    {
        elevatorMotor.set(speed);
    }
    public Boolean GetTop()
    {
        return highSwitch.get();
    }
    public void stop()
    {
        elevatorMotor.stopMotor();
    }
    public double getEncoder()
    {
        return forkEncoder.getDistance();
    }
    public void resetEncoder()
    {
        forkEncoder.reset();
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.


}

